DESIGNATED INITIALIZATION OF ARRAYS
We can use designators to initialize arrays as this makes our work easier if we say we have alot of contiguos zero elements in the array
An example is shown below:
Let's say we have this array: int arr[] = {1, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0};
How do we initialize this array without adding these zeros manaually? This is where designators come in
Instead of writing all the zeros, we can also initialize like this
  int arr[] = {1, [6] = 8, [7] = 9};
What we just did add is use the index to allocate values and the rest of the values not specified would be allocated zeroes automatically.
These indexes inside the array box are called the DESIGNATORS

Advantages of Designated Initializations
1. No need to bother about zero entires in the arrays
2. No need to bother about the order of entries. As long as the index is specified, it'll arrange itself in the array automatically so even if we write index 5 before 2, it'll arrange itself
    int arr[] = {1, [3] = 2, [1] = 4, [2] = 3} would still give us {1, 4, 3, 2}
3. Even if the array length isn't specified, the compiler looks for the biggest index, adds 1 to it and gets the size of the array
4. You can combine both normal initialization and designated initialization
5. If there's a class between normal and designated initialization, designators will win
      int arr[] = {1, 2, 3, [2] = 4, 5, 6}
  We can see that index[2] is already occupied by the value 3. But a designator now assigns the value 4 to it. This would be the new value of index 2 as designators always takes precedence over normal initializations
